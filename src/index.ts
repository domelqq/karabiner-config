import {
  duoLayer,
  map,
  NumberKeyValue,
  rule,
  SideModifierAlias,
  ToEvent,
  toKey,
  withCondition,
  withMapper,
  writeToProfile,
} from 'karabiner.ts'
import { ifJetBrainsIde, jetBrainsIde } from './apps/jetbrains-ide'
import { arc, ifArc } from './apps/arc'
import { ifSlack, slack } from './apps/slack'
import { ifSourceTree, sourceTree } from './apps/source-tree'
import { airmail, ifAirmail } from './apps/airmail'
import { system } from './apps/system'

const ifIde = ifJetBrainsIde
const ide = jetBrainsIde

const tapModifier = (v: SideModifierAlias, to: ToEvent) =>
  map(v).to(v).toIfAlone(to)

writeToProfile('Default', [
  rule('Hyper').manipulators([map('‚á™').toHyper().toIfAlone('‚éã')]),

  //// üè† home row

  // ‚åò & Caret & Action
  duoLayer('f', 'd').manipulators([
    // ‚Üê ‚Üë ‚Üì ‚Üí
    withMapper({ h: '‚Üê', j: '‚Üë', k: '‚Üì', l: '‚Üí' } as const)((k, v) =>
      map(k).to(v),
    ),
    withMapper({ n: '‚Üê', m: '‚Üë', ',': '‚Üì', '.': '‚Üí' } as const)((k, v) =>
      map(k).to(v, '‚åò'),
    ),
    withMapper({ y: '‚Üê', u: '‚Üë', i: '‚Üì', o: '‚Üí' } as const)((k, v) =>
      map(k).to(v, '‚å•'),
    ),
    withCondition(ifIde)({
      6: ide.moveCaret_previousCamelWord,
      9: ide.moveCaret_nextCamelWord,
      7: ide.scrollUp,
      8: ide.scrollDown,
    }),

    // ‚åò
    withMapper(['p', '/', '[', ']'])((k) => map(k).to(k, '‚åò')),
  ]),
  duoLayer('j', 'k').manipulators([
    // ‚åò
    withMapper([
      ...([1, 2, 3, 4, 5] as const),
      ...(['q', 'w', 'e', 'r', 't'] as const),
      ...(['a', 's', 'd', 'f', 'g'] as const),
      ...(['z', 'x', 'c', 'v', 'b'] as const),
    ])((k) => map(k).to(k, '‚åò')),
  ]),

  // ‚å• & Selection & Navigation
  duoLayer('f', 's').manipulators([
    // ‚Üê ‚Üë ‚Üì ‚Üí + ‚áß
    withMapper({ h: '‚Üê', j: '‚Üë', k: '‚Üì', l: '‚Üí' } as const)((k, v) =>
      map(k).to(v, '‚áß'),
    ),
    withMapper({ n: '‚Üê', m: '‚Üë', ',': '‚Üì', '.': '‚Üí' } as const)((k, v) =>
      map(k).to(v, '‚åò‚áß'),
    ),
    withMapper({ y: '‚Üê', u: '‚Üë', i: '‚Üì', o: '‚Üí' } as const)((k, v) =>
      map(k).to(v, '‚å•‚áß'),
    ),
    withCondition(ifIde)({
      6: ide.moveCaret_previousCamelWord_withSelection,
      9: ide.moveCaret_nextCamelWord_withSelection,
      7: ide.navigateInFile_previousHighlightedError,
      8: ide.navigateInFile_nextHighlightedError,
    }),

    // ‚å•
    withCondition(ifArc)({
      '[': arc.preTab,
      ']': arc.nextTab,
    }),
  ]),
  duoLayer('j', 'l').manipulators([
    withCondition(ifArc)({
      c: arc.copyCurrentTabUrl,
    }),
  ]),

  // ‚åÉ & Delete & Edit
  duoLayer('d', 's').manipulators([
    // delete
    { h: toKey('‚å´'), l: toKey('‚å¶') },
    { n: toKey('‚å´', '‚åò'), '.': toKey('‚å¶', '‚åò') },
    { y: toKey('‚å´', '‚å•'), o: toKey('‚å¶', '‚å•') },
    withCondition(ifIde)({
      ';': ide.delete_line,
      6: ide.delete_toCamelWordStart,
      9: ide.delete_toCamelWordEnd,

      // Move
      j: ide.code_moveLineUp,
      k: ide.code_moveLineDown,
      m: ide.code_moveStatementUp,
      ',': ide.code_moveStatementDown,
    }),

    // ‚åÉ
    { '‚èé': toKey('‚èé', '‚åÉ') },
    withCondition(ifArc)({
      '[': arc.preSpace,
      ']': arc.nextSpace,
    }),
  ]),
  duoLayer('k', 'l').manipulators([
    // ‚åÉ
    { '‚á•': toKey('‚á•', '‚åÉ') },
  ]),

  //// ‚è°‚Ä∫ bottom row

  // Version Control
  duoLayer('v', 'c').condition(ifIde).manipulators({
    j: ide.navigateInFile_previousChange,
    k: ide.navigateInFile_nextChange,

    h: ide.versionControl_commitMessageHistory,
    n: ide.versionControl_newBranch,
    u: ide.versionControl_updateProject,
    p: ide.versionControl_push,
  }),
  duoLayer('m', ',').condition(ifIde).manipulators({
    f: ide.versionControl_showAllAffectedFiles,
    a: ide.versionControl_amendCommit,
    b: ide.versionControl_branches,
    c: ide.versionControl_commit,
    z: ide.versionControl_rollBack,
  }),

  // Refactor
  duoLayer('v', 'x').condition(ifIde).manipulators({
    m: ide.refactor_move,
    i: ide.refactor_inline,
    p: ide.refactor_introduceParameter,
  }),
  duoLayer('m', '.').condition(ifIde).manipulators({
    s: ide.refactor_changeSignature,
    f: ide.refactor_introduceField,
    v: ide.refactor_introduceVariable,
    c: ide.refactor_introduceConstant,
    r: ide.refactor_rename,
  }),

  duoLayer('z', 'x').manipulators([
    map('‚ê£').to(system.emojiPicker),

    // See https://gitmoji.dev/
    withMapper({
      b: 'üë∑', // add or update ci Build system
      c: '‚úÖ', // _check
      d: 'üìù', // add or update Documentation
      f: 'üêõ', // Fix a bug
      h: 'üíØ', // _hundred
      j: 'üòÇ', // _joy
      m: 'üîÄ', // Merge branches
      n: '‚ú®', // introduce New features
      p: 'üëç', // _plus_one +1
      r: '‚ôªÔ∏è', // Refactor code
      s: 'üòÖ', // _sweat_smile
      t: 'üß™', // _test
      u: '‚¨ÜÔ∏è', // Upgrade dependencies
      v: 'üîñ', // release / Version tags
    })((k, v) => map(k).toPaste(v)),

    withMapper(['‚åò', '‚å•', '‚åÉ', '‚áß', '‚á™'])((k, i) =>
      map((i + 1) as NumberKeyValue).toPaste(k),
    ),
    withMapper(['‚åò', '‚å•', '‚åÉ', '‚áß'])((k, i) =>
      map((i + 6) as NumberKeyValue).toPaste(k),
    ),

    //           Paste the symbols instead of triggering the key
    withMapper(['‚Üê', '‚Üí', '‚Üë', '‚Üì', '‚ê£', '‚èé', '‚á•', '‚éã', '‚å´', '‚å¶', '‚á™'])((k) =>
      map(k).toPaste(k),
    ),
    map(',').toPaste('‚Äπ'),
    map('.').toPaste('‚Ä∫'),

    // Code snippets
    map('l').toTypeSequence('console.log()‚Üê'),
  ]),

  duoLayer('l', ';').manipulators([
    // Launch apps
    withMapper({
      a: 'Arc', // Browser
      c: 'Calendar',
      f: 'Finder',
      k: 'Lens', // K8s
      m: 'Airmail', // Mail
      n: 'Notion',
      r: 'Rider',
      s: 'Slack',
      t: 'Warp', // Terminal
      w: 'WebStorm',
      x: 'Xcode',
      z: 'zoom.us',
      ',': 'System Settings',
    })((k, v) => map(k).toApp(v)),
  ]),

  rule('apps and modifiers').manipulators([
    withCondition(ifAirmail)([
      tapModifier('‚Äπ‚åò', airmail.revealHideSidebar),
      tapModifier('‚Ä∫‚å•', airmail.gotoFirstMessage),
    ]),

    withCondition(ifArc)([
      tapModifier('‚Äπ‚åò', arc.revealHideSidebar),
      tapModifier('‚Äπ‚å•', arc.refresh),

      tapModifier('‚Ä∫‚åò', arc.developerTools),
      tapModifier('‚Ä∫‚å•', arc.openCommandBar),
    ]),

    withCondition(ifIde)([
      tapModifier('‚Äπ‚åò', ide.hideAllToolWindows),
      tapModifier('‚Äπ‚å•', ide.run),

      tapModifier('‚Ä∫‚åò', ide.terminal),
      tapModifier('‚Ä∫‚å•', ide.aceJump),
    ]),

    withCondition(ifSlack)([
      tapModifier('‚Äπ‚åò', slack.showHideSideBar),
      tapModifier('‚Äπ‚å•', slack.moveFocusToTheNextSection),
      tapModifier('‚Ä∫‚åò', slack.hideRightBar),
      tapModifier('‚Ä∫‚å•', slack.open),
    ]),

    withCondition(ifSourceTree)([
      tapModifier('‚Äπ‚å•', sourceTree.commit),
      tapModifier('‚Ä∫‚å•', sourceTree.fetch),
    ]),
  ]),

  // system
  rule('Mouse Cursor Position').manipulators([
    map('‚Üê', 'Meh').toMouseCursorPosition({ x: '25%', y: '50%' }),
    map('‚Üí', 'Meh').toMouseCursorPosition({ x: '75%', y: '50%' }),
    map('‚Üì', 'Meh').toMouseCursorPosition({ x: '50%', y: '50%' }),
    map('‚Üë', 'Meh').toMouseCursorPosition({ x: '100%', y: 0 }),
  ]),
])
